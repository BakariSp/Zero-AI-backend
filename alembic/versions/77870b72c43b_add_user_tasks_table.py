"""Add user_tasks table

Revision ID: 77870b72c43b
Revises: 2d8f826a827a
Create Date: 2025-04-19 17:26:11.361830

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
# Remove mysql dialect import if not explicitly needed for types here
# from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = '77870b72c43b'
down_revision: Union[str, None] = '2d8f826a827a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - Corrected ###
    # Create the user_tasks table (Moved from original downgrade)
    op.create_table('user_tasks',
        sa.Column('task_id', sa.String(length=255), nullable=False), # Use standard String with length
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('learning_path_id', sa.Integer(), nullable=True),
        # Use standard Enum and ensure TaskStatusEnum/TaskStageEnum are defined/imported if needed
        # Or use sa.String if enums are handled only in Python
        sa.Column('status', sa.String(length=50), nullable=False), # Example using String
        sa.Column('stage', sa.String(length=50), nullable=True),  # Example using String
        sa.Column('progress', sa.Float(), nullable=True),
        sa.Column('message', sa.Text(), nullable=True),
        sa.Column('error_details', sa.Text(), nullable=True),
        # Use timezone=True for standard DateTime
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), onupdate=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.ForeignKeyConstraint(['learning_path_id'], ['learning_paths.id'], name='fk_user_tasks_learning_path_id'), # Added explicit FK name
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_user_tasks_user_id'), # Added explicit FK name
        sa.PrimaryKeyConstraint('task_id')
    )
    # Create indexes (Moved from original downgrade)
    op.create_index(op.f('ix_user_tasks_user_id'), 'user_tasks', ['user_id'], unique=False)
    op.create_index(op.f('ix_user_tasks_task_id'), 'user_tasks', ['task_id'], unique=False) # Index on PK might be redundant depending on DB
    op.create_index(op.f('ix_user_tasks_status'), 'user_tasks', ['status'], unique=False)
    op.create_index(op.f('ix_user_tasks_learning_path_id'), 'user_tasks', ['learning_path_id'], unique=False)

    # Remove the incorrect index creation on 'users' table if it wasn't intended for this migration
    # op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False) # Moved from original upgrade - likely belongs elsewhere or is wrong
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - Corrected ###
    # Drop indexes (Moved from original upgrade)
    # Note: Dropping FK constraints might be needed first if not handled automatically by drop_table
    op.drop_index(op.f('ix_user_tasks_learning_path_id'), table_name='user_tasks')
    op.drop_index(op.f('ix_user_tasks_status'), table_name='user_tasks')
    op.drop_index(op.f('ix_user_tasks_task_id'), table_name='user_tasks')
    op.drop_index(op.f('ix_user_tasks_user_id'), table_name='user_tasks')
    # Drop the user_tasks table (Moved from original upgrade)
    op.drop_table('user_tasks')

    # Remove the incorrect index drop on 'users' table if it wasn't intended for this migration
    # op.drop_index(op.f('ix_users_id'), table_name='users') # Moved from original downgrade - likely belongs elsewhere or is wrong
    # ### end Alembic commands ###
